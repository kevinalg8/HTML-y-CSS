*,
*::after *::before {
  box-sizing: border-box;
}

.container {
  background-color: #333;
  height: 400px;
  width: 1000px;

  /*define que una caja sera de flexbox de caja o flexbox de linea*/
  display: flex;
  /*define la direccion o el eje principal de un contender*/
  flex-direction: row;
  /*atajo de flex direction y flex wrap*/
  flex-flow: column nowrap;
  /*alineacion de los elemento hijas dentro de la caja padre dependiendo de la padre*/
  justify-content: flex-start;
  /*funciona para alinear los hijos dentro del eje transversal dentro de cada linea*/
  align-items: stretch;
  /*define la alineacion de los hijos en el eje tranversal (No funciona cuando los hijos estan en una sola line)*/
  align-content: flex-start;
}
.items {
  border: medium solid #999;
  /*height: 10%;*/
  background-color: #666;
  /*Cuando la caja flexblox tenga espacio sobrante, es la habilidad o el factor de crecer, el valor por
  defecto es 0, NO se aceptan valores negativos */
  flex-grow: 0;
  /*Cuando la caja flexbox NO tenga espacio sobrante, es la habilidad o el factor de encogerse valor
  por defecto es 1, NO se acepta valore negativos */
  flex-shrink: 1;
  /*cunaod una caja flexbox es el tama√±o de la caja hija dentro de la linea flexbox*/
  flex-basis: auto;
  flex-basis:100px;
  /*shorthand donde 0 es el flexgrow, 1 es flexshrink y auto es el basis*/
  flex: 0 1 144px;
  /*Order reprensenta el orden que tendra los elementos hijos dentro la caja padre
  valor por defecto es 0 se aceptan tanto valores negativos como posistivos
  
  un valor menor siempre ira antes que un valor mayor*/
  order: 0;
  /*sobreescribe el valor de la propiedad aling-items solo para el elemento hijo especifico*/
  align-self: stretch;
}

.items:nth-child(2) {
  /*flex-shrink: 2;*/
  order:-1;
}

.items:nth-child(3) {
  align-self: center;
}

/*.items:nth-child(2),
.items:nth-child(17) {
  font-size: 220%;
}
*/
